---
import "@repo/ui/sakupi01.com.css";
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";

interface Props {
  pageTitle?: string;
  description: string;
  url: string;
}

const { pageTitle = "saku's blog", description, url } = Astro.props;
---

<!doctype html>
<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="description" content="The personal website of saku. Front-end developer, Design Technologist, and enthusiast of all things Web & UI" />
    <link rel="icon" type="image/svg+xml" href="/favicon.png" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Alegreya:ital,wght@0,400..900;1,400..900&display=swap" rel="stylesheet">
    <meta property="og:title" content={pageTitle} />
    <meta property="og:type" content="website" />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={`${import.meta.env.PUBLIC_BLOG}cherry-blossom.png`} />
    <meta property="og:url" content={`${import.meta.env.PUBLIC_BLOG}${url}`} />
    <meta name="twitter:card" content="summary" />
    <script is:inline src="https://cdn.jsdelivr.net/npm/baseline-status@latest/baseline-status.min.js" type="module"></script>
    <script is:inline>
      const getInitialTheme = () => {
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
          return savedTheme;
        }
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      };
      
      const theme = getInitialTheme();
      document.documentElement.classList.toggle('dark', theme === 'dark');
    </script>
        <script>
          (function() {
            const themeToggle = document.getElementById('themeToggle');
          
            // Function to set theme in localStorage and update DOM
            const setTheme = (theme: 'light' | 'dark') => {
            localStorage.setItem('theme', theme);
            document.documentElement.classList.toggle('dark', theme === 'dark');
            themeToggle?.classList.toggle('theme-toggle--toggled', theme === 'light');
            };
        
            // Initialize theme from localStorage or system preference
            const initializeTheme = () => {
              const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null;
              if (savedTheme) {
                setTheme(savedTheme);
              } else {
                const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                setTheme(prefersDark ? 'dark' : 'light');
              }
            };
        
            // Initialize theme on page load
            initializeTheme();
        
            // Create audio elements for theme toggle sounds
            const lightToAudio = new Audio('/sounds/light-dark-toggle.mp3');
            const darkToAudio = new Audio('/sounds/light-dark-toggle.mp3');
            
            // Set default properties for audio elements
            [lightToAudio, darkToAudio].forEach(audio => {
            audio.volume = 0.4;
            audio.preload = 'auto';
            });
            
            // Toggle theme when button is clicked
            themeToggle?.addEventListener('click', () => {
            const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            const soundEnabled = localStorage.getItem('soundEnabled') !== 'false';
            
            if (soundEnabled) {
              const audio = newTheme === 'light' ? lightToAudio : darkToAudio;
              audio.play().catch(e => console.warn('Audio playback failed:', e));
            }
            
            setTheme(newTheme);
            });
          
            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
            if (!localStorage.getItem('theme')) {
              setTheme(e.matches ? 'dark' : 'light');
            }
            });
          })();
        </script>
    <script>	
	// @ts-ignore
	if (window.CSS && CSS.registerProperty) {
		window.CSS.registerProperty({
          name: '--gradPoint',
          syntax: '<percentage>',
			inherits: false,
          initialValue: '40%',
        });
	}

  (function() {
    // Original color palette
    const colorPalette = ['#fa744f', '#ffbcbc', '#4cd3c2', '#b7efcd', '#edffea', '#ffe75e', '#feb72b', '#e85f99', '#9399ff', '#dab8f3', '#ea7ad7', '#ce0f3d', '#fd2eb3', '#ffc6c7'];
		
    // Function to add opacity to a color
// @ts-ignore
    function addOpacity(color, opacity = 0.4) {
  // Convert hex to rgba
  const r = parseInt(color.slice(1, 3), 16);
  const g = parseInt(color.slice(3, 5), 16);
  const b = parseInt(color.slice(5, 7), 16);
  return `rgba(${r}, ${g}, ${b}, ${opacity})`;
    }

    // Create a copy of the color palette to work with
    let availableColors = [...colorPalette];

    // Function to select and remove a random color from availableColors
    function selectRandomColor() {
  if (availableColors.length === 0) return 'rgba(0, 0, 0, 0.4)';
  const randomIndex = Math.floor(Math.random() * availableColors.length);
  const selectedColor = availableColors[randomIndex];
  // Remove the selected color from availableColors
      availableColors.splice(randomIndex, 1);
      return addOpacity(selectedColor);
    }

    // Select 6 unique colors
    const color1 = selectRandomColor();
    const color2 = selectRandomColor();
    const color3 = selectRandomColor();
    const color4 = selectRandomColor();
    const color5 = selectRandomColor();
    const color6 = selectRandomColor();

    // Set color values on the element
    const slidesContainer = document.querySelector('.slides-container');
    if (slidesContainer) {
// @ts-ignore
slidesContainer.style.setProperty('--color1', color1);
// @ts-ignore
slidesContainer.style.setProperty('--color2', color2);
// @ts-ignore
slidesContainer.style.setProperty('--color3', color3);
// @ts-ignore
slidesContainer.style.setProperty('--color4', color4);
// @ts-ignore
slidesContainer.style.setProperty('--color5', color5);
// @ts-ignore
    slidesContainer.style.setProperty('--color6', color6);
    }
    })();
	
    </script>
     <script
     is:inline
     type="text/partytown"
     async
     src="https://www.googletagmanager.com/gtag/js?id=G-KC1QTQK44J"></script>
   <script is:inline type="text/partytown">
     window.dataLayer = window.dataLayer || [];
     function gtag() {
     dataLayer.push(arguments);
     }
     gtag("js", new Date());
     gtag("config", "G-KC1QTQK44J");
   </script>
   <script type="module">
    // Anchor positioning Polyfill
    if (!("anchorName" in document.documentElement.style)) {
      import("https://unpkg.com/@oddbird/css-anchor-positioning");
    }
  </script>
    <meta name="generator" content={Astro.generator} />
    <title>{pageTitle}</title>
  </head>
  <body class="page">
    <Header />
    <main>
      <slot />
    </main>
    <Footer />
  </body>
</html>